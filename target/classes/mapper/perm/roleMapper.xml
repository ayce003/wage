<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ycjd.payslip.dao.perm.IRoleDao">
    <!--########################################################generated code start,do not update################################################################-->
    <sql id="projection">
        <choose>
             <when test="pager!=null and pager.includes!=null">
                 <foreach collection="pager.includes" item="field" separator=",">
                     T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(field)}
                 </foreach>
             </when>
             <when test="pager!=null and pager.excludes!=null">
                 <trim suffixOverrides=",">
                         <if test="!pager.excludes.contains('id')">
                             T.id,
                         </if>
                         <if test="!pager.excludes.contains('title')">
                             T.title,
                         </if>
                         <if test="!pager.excludes.contains('createTime')">
                             T.create_time,
                         </if>
                 </trim>
             </when>
             <otherwise>
                 T.*
             </otherwise>
         </choose>
    </sql>
    <sql id="match">
        <where>
              <if test="id!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='id'">
                             T.id like concat('%',#{id},'%')
                         </when>
                         <otherwise>
                             T.id=#{id}
                         </otherwise>
                      </choose>
              </if>
              <if test="title!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='title'">
                            and T.title like concat('%',#{title},'%')
                         </when>
                         <otherwise>
                            and T.title=#{title}
                         </otherwise>
                      </choose>
              </if>
              <if test="createTime!=null">
                    <choose>
                         <when test="pager!=null and pager.like=='createTime'">
                            and T.create_time like concat('%',#{createTime},'%')
                         </when>
                         <otherwise>
                            and T.create_time=#{createTime}
                         </otherwise>
                      </choose>
              </if>
            <if test="defaultRoleStatus!=null">
                <choose>
                    <when test="pager!=null and pager.like=='defaultRoleStatus'">
                        and T.default_role_status like concat('%',#{defaultRoleStatus},'%')
                    </when>
                    <otherwise>
                        and T.default_role_status=#{defaultRoleStatus}
                    </otherwise>
                </choose>
            </if>
            <if test="pager!=null and pager.rangeField!=null and pager.rangeArray!=null and pager.rangeArray.length==2">
                <foreach collection="pager.rangeArray" item="item"  index="i">
                    <if test="i==0 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &gt;= #{item}
                    </if>
                    <if test="i==1 and item!=null">
                        and ${@cn.hutool.core.util.StrUtil@toUnderlineCase(pager.rangeField)} &lt;= #{item}
                    </if>
                </foreach>

            </if>
        </where>
    </sql>
    <sql id="sort">
        <if test="pager!=null and pager.sortField!=null and pager.sortOrder!=null">
            order by
            <foreach collection="pager.sortField.split(',')" item="s" index="i" separator=",">
                T.${@cn.hutool.core.util.StrUtil@toUnderlineCase(s)} ${pager.sortOrder.split(',')[i]}
            </foreach>
        </if>
    </sql>
    <sql id="page">
        <if test="pager!=null and  pager.paging">
            limit #{pager.beginRow},#{pager.pageSize}
        </if>
    </sql>


    <select id="findRoleListByCondition" parameterType="Role" resultType="Role">
        select
         <include refid="projection"/>
         from role T
         <include refid="match"/>
         <include refid="sort"/>
         <include refid="page"/>


    </select>
    <select id="findRoleCountByCondition" parameterType="Role" resultType="long">
        select count(*) from role T
        <include refid="match"/>
    </select>
    <select id="findRoleById" resultType="Role">
        select * from role where id=#{id}
    </select>
    <select id="findOneRoleByCondition" parameterType="Role" resultType="Role">
        select
         <include refid="projection"/>
         from role T
        <include refid="match"/>
    </select>
    <insert id="saveRole" parameterType="Role">
        insert into role
         (
            id,
            title,
            create_time,
            default_role_status
        ) values
         (
                #{id}
                ,
                #{title}
                ,
                now(),
                #{defaultRoleStatus}
         )
    </insert>
    <update id="updateRole" parameterType="Role">
        update role
        <set>
                    <if test="title!=null ">
                        title=#{title},
                    </if>
                    <if test="createTime!=null ">
                        create_time=#{createTime},
                    </if>
                    <if test="defaultRoleStatus!=null ">
                        default_role_status=#{defaultRoleStatus}
                    </if>
          </set>
         where id=#{id}
    </update>
    <delete id="deleteRole" >
        delete from role where id=#{id}
    </delete>
    <delete id="deleteRoleByCondition" >
        delete T from role T
        <include refid="match"/>
    </delete>
    <insert id="batchSaveRole" parameterType="Role">
        INSERT INTO role (  id,  title,  create_time )
        VALUES
        <foreach collection="list" item="role" separator=",">
            (  #{role.id},  #{role.title},  #{role.createTime}  )
        </foreach>
    </insert>
    <!--##################################################generated code end,do not update######################################################################-->

    <select id="findPermChecked" resultType="java.lang.String">
        SELECT SP.id id from role SR inner join role_perm RP on SR.id=RP.role_id
											inner join perm SP on SP.id=RP.perm_id
											left join perm SP1 on SP.id=SP1.parent_id
											where SR.id=#{arg0} and SP1.id is null
    </select>

    <delete id="deleteRolePermByRoleId">
        delete from role_perm where role_id=#{roleId}
    </delete>

    <insert id="batchSaveRolePerm" parameterType="RolePerm" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO role_perm (
        id,
        role_id,
        perm_id
        )
        VALUES
        <foreach collection="list" item="rolePerm" separator=",">
            (
            #{rolePerm.id},
            #{rolePerm.roleId},
            #{rolePerm.permId}
            )
        </foreach>

    </insert>


    <select id="findCheckedRoloIdsByAdminId" resultType="java.lang.String">
         select SR.id
         FROM worker A
         INNER JOIN work_role AR
         ON A.id=AR.work_id
         INNER JOIN role SR
         ON AR.role_id= SR.id
         where A.id=#{adminId}
         group by SR.id
    </select>

    <delete id="deleteAdminRoleByAdminId">
        delete from work_role where work_id=#{adminId}
    </delete>



    <insert id="batchSaveAdminRole" parameterType="WorkRole" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO work_role (  id,  work_id,  role_id )
        VALUES
        <foreach collection="list" item="WorkRole" separator=",">
            (  #{WorkRole.id},  #{WorkRole.workId},  #{WorkRole.roleId}  )
        </foreach>
    </insert>
</mapper>